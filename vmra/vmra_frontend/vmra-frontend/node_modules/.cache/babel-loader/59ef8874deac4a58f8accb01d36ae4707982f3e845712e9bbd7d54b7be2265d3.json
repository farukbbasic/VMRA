{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Korisnik\\\\Desktop\\\\vmra project\\\\vmra_frontend\\\\vmra-frontend\\\\src\\\\GanttChart.js\";\n// Importing necessary libraries\nimport React from 'react';\nimport './GanttChart.css'; // Add styles for the Gantt chart\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GanttChart = ({\n  tasks\n}) => {\n  const startTime = Math.min(...tasks.map(task => new Date(task.startTime).getTime()));\n  const endTime = Math.max(...tasks.map(task => new Date(task.endTime).getTime()));\n  const totalDuration = endTime - startTime;\n\n  // Predefined color list\n  const colors = [\"#FF5733\", \"#33FF57\", \"#3357FF\", \"#FF33A1\", \"#33FFF3\", \"#A133FF\", \"#FFC733\", \"#33FF8A\", \"#FF3333\", \"#33A1FF\", \"#8AFF33\", \"#FF8A33\", \"#8A33FF\", \"#33FFC7\", \"#FF338A\", \"#A1FF33\", \"#5733FF\", \"#FFA133\", \"#33FFA1\", \"#4CAF50\"];\n\n  // Create a map for VM ID to color\n  const vmColorMap = {};\n  let colorIndex = 0;\n  tasks.forEach(task => {\n    if (!vmColorMap[task.vmId]) {\n      vmColorMap[task.vmId] = colors[colorIndex % colors.length];\n      colorIndex++;\n    }\n  });\n\n  // Function to get color for a VM\n  const getVmColor = vmId => vmColorMap[vmId];\n\n  // Get unique VMs from tasks\n  const uniqueVms = [...new Set(tasks.map(task => task.vmId))];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gantt-chart\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gantt-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Gantt Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gantt-legend\",\n      children: uniqueVms.map(vmId => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gantt-legend-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"gantt-legend-color\",\n          style: {\n            backgroundColor: getVmColor(vmId),\n            width: '20px',\n            height: '20px',\n            display: 'inline-block',\n            marginRight: '8px',\n            borderRadius: '50%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"VM \", vmId]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this)]\n      }, vmId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gantt-container\",\n      children: tasks.map((task, index) => {\n        const taskStart = new Date(task.startTime).getTime();\n        const taskEnd = new Date(task.endTime).getTime();\n        const leftPosition = (taskStart - startTime) / totalDuration * 100;\n        const width = (taskEnd - taskStart) / totalDuration * 100;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"gantt-row\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"task-label\",\n            children: [task.taskName, \" (VM\", task.vmId, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"gantt-bar\",\n            style: {\n              left: `${leftPosition}%`,\n              width: `${width}%`,\n              backgroundColor: getVmColor(task.vmId)\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_c = GanttChart;\nexport default GanttChart;\nvar _c;\n$RefreshReg$(_c, \"GanttChart\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","GanttChart","tasks","startTime","Math","min","map","task","Date","getTime","endTime","max","totalDuration","colors","vmColorMap","colorIndex","forEach","vmId","length","getVmColor","uniqueVms","Set","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","backgroundColor","width","height","display","marginRight","borderRadius","index","taskStart","taskEnd","leftPosition","taskName","left","_c","$RefreshReg$"],"sources":["C:/Users/Korisnik/Desktop/vmra project/vmra_frontend/vmra-frontend/src/GanttChart.js"],"sourcesContent":["// Importing necessary libraries\r\nimport React from 'react';\r\nimport './GanttChart.css'; // Add styles for the Gantt chart\r\n\r\nconst GanttChart = ({ tasks }) => {\r\n  const startTime = Math.min(...tasks.map(task => new Date(task.startTime).getTime()));\r\n  const endTime = Math.max(...tasks.map(task => new Date(task.endTime).getTime()));\r\n  const totalDuration = endTime - startTime;\r\n\r\n  // Predefined color list\r\n  const colors = [\r\n    \"#FF5733\", \"#33FF57\", \"#3357FF\", \"#FF33A1\", \"#33FFF3\", \"#A133FF\", \r\n    \"#FFC733\", \"#33FF8A\", \"#FF3333\", \"#33A1FF\", \"#8AFF33\", \"#FF8A33\", \r\n    \"#8A33FF\", \"#33FFC7\", \"#FF338A\", \"#A1FF33\", \"#5733FF\", \"#FFA133\", \r\n    \"#33FFA1\", \"#4CAF50\"\r\n  ];\r\n\r\n  // Create a map for VM ID to color\r\n  const vmColorMap = {};\r\n  let colorIndex = 0;\r\n\r\n  tasks.forEach(task => {\r\n    if (!vmColorMap[task.vmId]) {\r\n      vmColorMap[task.vmId] = colors[colorIndex % colors.length];\r\n      colorIndex++;\r\n    }\r\n  });\r\n\r\n  // Function to get color for a VM\r\n  const getVmColor = (vmId) => vmColorMap[vmId];\r\n\r\n  // Get unique VMs from tasks\r\n  const uniqueVms = [...new Set(tasks.map(task => task.vmId))];\r\n\r\n  return (\r\n    <div className=\"gantt-chart\">\r\n      <div className=\"gantt-header\">\r\n        <h3>Gantt Chart</h3>\r\n      </div>\r\n\r\n      {/* Display VM Names with their colors */}\r\n      <div className=\"gantt-legend\">\r\n        {uniqueVms.map(vmId => (\r\n          <div key={vmId} className=\"gantt-legend-item\">\r\n            <div\r\n              className=\"gantt-legend-color\"\r\n              style={{\r\n                backgroundColor: getVmColor(vmId),\r\n                width: '20px',\r\n                height: '20px',\r\n                display: 'inline-block',\r\n                marginRight: '8px',\r\n                borderRadius: '50%'\r\n              }}\r\n            ></div>\r\n            <span>VM {vmId}</span>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"gantt-container\">\r\n        {tasks.map((task, index) => {\r\n          const taskStart = new Date(task.startTime).getTime();\r\n          const taskEnd = new Date(task.endTime).getTime();\r\n          const leftPosition = ((taskStart - startTime) / totalDuration) * 100;\r\n          const width = ((taskEnd - taskStart) / totalDuration) * 100;\r\n\r\n          return (\r\n            <div key={index} className=\"gantt-row\">\r\n              <span className=\"task-label\">{task.taskName} (VM{task.vmId})</span>\r\n              <div\r\n                className=\"gantt-bar\"\r\n                style={{\r\n                  left: `${leftPosition}%`,\r\n                  width: `${width}%`,\r\n                  backgroundColor: getVmColor(task.vmId),\r\n                }}\r\n              ></div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GanttChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}