{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Korisnik\\\\Desktop\\\\vmra project\\\\vmra_frontend\\\\vmra-frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// Importing necessary libraries\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport GanttChart from './GanttChart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [vms, setVms] = useState([]);\n  const [summary, setSummary] = useState({});\n  const [predictions, setPredictions] = useState([]);\n  const [simulation, setSimulation] = useState([]);\n  const [tasks, setTasks] = useState([]); // For storing tasks for Gantt chart\n  const [isScheduling, setIsScheduling] = useState(false); // Track if scheduling is in progress\n  const [canRestart, setCanRestart] = useState(false); // Track if restart is allowed\n\n  // Fetch VMs data\n  const fetchVms = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/vms');\n      const vmsWithTasks = response.data.map(vm => ({\n        ...vm,\n        remainingTasks: vm.remainingTasks || 0 // Ensure remainingTasks is initialized\n      }));\n      setVms(vmsWithTasks);\n    } catch (error) {\n      console.error('Error fetching VMs:', error);\n    }\n  };\n\n  // Fetch summary data\n  const fetchSummary = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/summary');\n      setSummary(response.data);\n    } catch (error) {\n      console.error('Error fetching summary:', error);\n    }\n  };\n\n  // Fetch predictions\n  const fetchPredictions = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/predict');\n      setPredictions(response.data);\n    } catch (error) {\n      console.error('Error fetching predictions:', error);\n    }\n  };\n\n  // Allocate resources to a VM\n  const allocateResources = async (vmId, cpu, memory) => {\n    try {\n      await axios.post('http://localhost:5000/allocate', {\n        vm_id: vmId,\n        cpu: cpu,\n        memory: memory\n      });\n      fetchVms();\n    } catch (error) {\n      console.error('Error allocating resources:', error);\n    }\n  };\n\n  // Apply round-robin scheduling and simulate execution\n  const scheduleVms = async () => {\n    if (simulation.length === 0) {\n      alert('No VMs available to schedule tasks.');\n      return;\n    }\n    try {\n      setIsScheduling(true); // Disable restart during scheduling\n      setCanRestart(false); // Disable restart button\n      const response = await axios.post('http://localhost:5000/schedule');\n      setSimulation(prevSimulation => prevSimulation.map(vm => ({\n        ...vm,\n        status: 'Running',\n        remainingTasks: vm.remainingTasks || 5 // Ensure remainingTasks is initialized for scheduling\n      })));\n      let currentTime = new Date().getTime(); // Start time tracking\n\n      const simulateExecution = () => {\n        let queueIndex = 0;\n        const interval = setInterval(() => {\n          if (simulation.length === 0) {\n            clearInterval(interval);\n            return;\n          }\n          setSimulation(prevSimulation => {\n            const updatedSimulation = [...prevSimulation];\n\n            // Process one VM at a time in round-robin order\n            const currentVM = updatedSimulation[queueIndex];\n            if (currentVM && currentVM.remainingTasks > 0) {\n              // Check if currentVM is valid\n              const startTime = new Date(currentTime);\n              currentTime += 1000; // Increment time for the next task\n              const endTime = new Date(currentTime);\n              currentVM.remainingTasks -= 1;\n              currentVM.cpu_usage = Math.max(currentVM.cpu_usage - 2, 0);\n              currentVM.memory_usage = Math.max(currentVM.memory_usage - 128, 0);\n              currentVM.status = currentVM.remainingTasks === 0 ? 'Completed' : 'Running';\n\n              // Set CPU and memory to 0 when tasks are completed\n              if (currentVM.remainingTasks === 0) {\n                currentVM.cpu_usage = 0;\n                currentVM.memory_usage = 0;\n              }\n\n              // Add task to Gantt chart\n              const ganttTask = {\n                vmId: currentVM.id,\n                taskName: `Task ${5 - currentVM.remainingTasks}`,\n                startTime,\n                endTime,\n                color: currentVM.id % 2 === 0 ? 'blue' : 'orange' // Alternate colors for tasks\n              };\n              setTasks(prevTasks => [...prevTasks, ganttTask]);\n            }\n            queueIndex = (queueIndex + 1) % updatedSimulation.length;\n            return updatedSimulation;\n          });\n\n          // Check if all tasks are completed\n          const allCompleted = simulation.every(vm => vm.remainingTasks === 0);\n          if (allCompleted) {\n            clearInterval(interval);\n\n            // Allow restart after scheduling is finished\n            setIsScheduling(false);\n            setCanRestart(true); // Enable restart button\n          }\n        }, 1000); // Execute every second\n      };\n      simulateExecution();\n    } catch (error) {\n      console.error('Error scheduling VMs:', error);\n    }\n  };\n\n  // Add a new VM dynamically\n  const addVm = () => {\n    if ((summary.total_cpu_usage || 0) >= 100) {\n      alert('Cannot add more VMs: CPU usage limit reached');\n      return;\n    }\n    setCanRestart(false); // Disable restart button during VM addition\n\n    const newVm = {\n      id: vms.length + 1,\n      name: `VM${vms.length + 1}`,\n      cpu_usage: Math.min(Math.floor(Math.random() * 50), 100 - (summary.total_cpu_usage || 0)),\n      memory_usage: Math.floor(Math.random() * 5000),\n      status: 'Scheduled',\n      remainingTasks: 5 // Ensure new VMs have remainingTasks initialized\n    };\n    setVms([...vms, newVm]);\n    setSimulation([...simulation, newVm]);\n    setSummary(prevSummary => ({\n      ...prevSummary,\n      total_cpu_usage: (prevSummary.total_cpu_usage || 0) + newVm.cpu_usage,\n      total_memory_usage: (prevSummary.total_memory_usage || 0) + newVm.memory_usage,\n      vm_count: (prevSummary.vm_count || 0) + 1\n    }));\n  };\n\n  // Enable the Restart button when all tasks are completed\n  useEffect(() => {\n    const allCompleted = simulation.length > 0 && simulation.every(vm => vm.status === 'Completed');\n    if (allCompleted) {\n      setCanRestart(true); // Enable the Restart button\n      setIsScheduling(false); // Ensure scheduling is marked as finished\n    }\n  }, [simulation]);\n  useEffect(() => {\n    fetchVms();\n    fetchSummary();\n    fetchPredictions();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Virtual Machine Resource Allocator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"summary\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Summary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Total CPU Usage: \", summary.total_cpu_usage]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Total Memory Usage: \", summary.total_memory_usage]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"VM Count: \", summary.vm_count]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"vms\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Virtual Machines\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this), simulation.length > 0 ? /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"CPU Usage\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Memory Usage\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Status\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Remaining Tasks\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Actions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: simulation.map((vm, index) => {\n            var _vm$remainingTasks;\n            return vm ? /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: vm.id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 220,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: vm.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 221,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: vm.cpu_usage\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 222,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: vm.memory_usage\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 223,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: vm.status\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 224,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: (_vm$remainingTasks = vm.remainingTasks) !== null && _vm$remainingTasks !== void 0 ? _vm$remainingTasks : 0\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 225,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => allocateResources(vm.id, vm.cpu_usage + 10, vm.memory_usage + 512),\n                  disabled: vm.status === 'Completed',\n                  children: \"Allocate Resources\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 227,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 226,\n                columnNumber: 21\n              }, this)]\n            }, vm.id || index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 19\n            }, this) : null;\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No VMs available. Please add VMs to start scheduling.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addVm,\n        disabled: summary.total_cpu_usage >= 100 || isScheduling,\n        children: \"Add VM\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: restart,\n        disabled: !canRestart,\n        children: \"Restart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gantt\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Task Gantt Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GanttChart, {\n        tasks: tasks\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: scheduleVms,\n        disabled: isScheduling || !simulation.length,\n        children: \"Apply Round-Robin Scheduling\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"b3js2BzfnaOf5x5GQUXi9cT0gZE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","GanttChart","jsxDEV","_jsxDEV","App","_s","vms","setVms","summary","setSummary","predictions","setPredictions","simulation","setSimulation","tasks","setTasks","isScheduling","setIsScheduling","canRestart","setCanRestart","fetchVms","response","get","vmsWithTasks","data","map","vm","remainingTasks","error","console","fetchSummary","fetchPredictions","allocateResources","vmId","cpu","memory","post","vm_id","scheduleVms","length","alert","prevSimulation","status","currentTime","Date","getTime","simulateExecution","queueIndex","interval","setInterval","clearInterval","updatedSimulation","currentVM","startTime","endTime","cpu_usage","Math","max","memory_usage","ganttTask","id","taskName","color","prevTasks","allCompleted","every","addVm","total_cpu_usage","newVm","name","min","floor","random","prevSummary","total_memory_usage","vm_count","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","_vm$remainingTasks","onClick","disabled","restart","_c","$RefreshReg$"],"sources":["C:/Users/Korisnik/Desktop/vmra project/vmra_frontend/vmra-frontend/src/App.js"],"sourcesContent":["// Importing necessary libraries\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport GanttChart from './GanttChart';\n\nconst App = () => {\n  const [vms, setVms] = useState([]);\n  const [summary, setSummary] = useState({});\n  const [predictions, setPredictions] = useState([]);\n  const [simulation, setSimulation] = useState([]);\n  const [tasks, setTasks] = useState([]); // For storing tasks for Gantt chart\n  const [isScheduling, setIsScheduling] = useState(false); // Track if scheduling is in progress\n  const [canRestart, setCanRestart] = useState(false); // Track if restart is allowed\n\n  // Fetch VMs data\n  const fetchVms = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/vms');\n      const vmsWithTasks = response.data.map(vm => ({\n        ...vm,\n        remainingTasks: vm.remainingTasks || 0 // Ensure remainingTasks is initialized\n      }));\n      setVms(vmsWithTasks);\n    } catch (error) {\n      console.error('Error fetching VMs:', error);\n    }\n  };\n\n  // Fetch summary data\n  const fetchSummary = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/summary');\n      setSummary(response.data);\n    } catch (error) {\n      console.error('Error fetching summary:', error);\n    }\n  };\n\n  // Fetch predictions\n  const fetchPredictions = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/predict');\n      setPredictions(response.data);\n    } catch (error) {\n      console.error('Error fetching predictions:', error);\n    }\n  };\n\n  // Allocate resources to a VM\n  const allocateResources = async (vmId, cpu, memory) => {\n    try {\n      await axios.post('http://localhost:5000/allocate', {\n        vm_id: vmId,\n        cpu: cpu,\n        memory: memory,\n      });\n      fetchVms();\n    } catch (error) {\n      console.error('Error allocating resources:', error);\n    }\n  };\n\n  // Apply round-robin scheduling and simulate execution\n  const scheduleVms = async () => {\n    if (simulation.length === 0) {\n      alert('No VMs available to schedule tasks.');\n      return;\n    }\n\n    try {\n      setIsScheduling(true); // Disable restart during scheduling\n      setCanRestart(false); // Disable restart button\n      const response = await axios.post('http://localhost:5000/schedule');\n      setSimulation(prevSimulation => prevSimulation.map(vm => ({\n        ...vm,\n        status: 'Running',\n        remainingTasks: vm.remainingTasks || 5 // Ensure remainingTasks is initialized for scheduling\n      })));\n\n      let currentTime = new Date().getTime(); // Start time tracking\n\n      const simulateExecution = () => {\n        let queueIndex = 0;\n\n        const interval = setInterval(() => {\n          if (simulation.length === 0) {\n            clearInterval(interval);\n            return;\n          }\n\n          setSimulation(prevSimulation => {\n            const updatedSimulation = [...prevSimulation];\n\n            // Process one VM at a time in round-robin order\n            const currentVM = updatedSimulation[queueIndex];\n            if (currentVM && currentVM.remainingTasks > 0) { // Check if currentVM is valid\n              const startTime = new Date(currentTime);\n              currentTime += 1000; // Increment time for the next task\n              const endTime = new Date(currentTime);\n\n              currentVM.remainingTasks -= 1;\n              currentVM.cpu_usage = Math.max(currentVM.cpu_usage - 2, 0);\n              currentVM.memory_usage = Math.max(currentVM.memory_usage - 128, 0);\n              currentVM.status = currentVM.remainingTasks === 0 ? 'Completed' : 'Running';\n\n              // Set CPU and memory to 0 when tasks are completed\n              if (currentVM.remainingTasks === 0) {\n                currentVM.cpu_usage = 0;\n                currentVM.memory_usage = 0;\n              }\n\n              // Add task to Gantt chart\n              const ganttTask = {\n                vmId: currentVM.id,\n                taskName: `Task ${5 - currentVM.remainingTasks}`,\n                startTime,\n                endTime,\n                color: currentVM.id % 2 === 0 ? 'blue' : 'orange' // Alternate colors for tasks\n              };\n              setTasks(prevTasks => [...prevTasks, ganttTask]);\n            }\n\n            queueIndex = (queueIndex + 1) % updatedSimulation.length;\n\n            return updatedSimulation;\n          });\n\n          // Check if all tasks are completed\n          const allCompleted = simulation.every(vm => vm.remainingTasks === 0);\n          if (allCompleted) {\n            clearInterval(interval);\n\n            // Allow restart after scheduling is finished\n            setIsScheduling(false);\n            setCanRestart(true); // Enable restart button\n          }\n        }, 1000); // Execute every second\n      };\n\n      simulateExecution();\n    } catch (error) {\n      console.error('Error scheduling VMs:', error);\n    }\n  };\n\n  // Add a new VM dynamically\n  const addVm = () => {\n    if ((summary.total_cpu_usage || 0) >= 100) {\n      alert('Cannot add more VMs: CPU usage limit reached');\n      return;\n    }\n  \n    setCanRestart(false); // Disable restart button during VM addition\n  \n    const newVm = {\n      id: vms.length + 1,\n      name: `VM${vms.length + 1}`,\n      cpu_usage: Math.min(Math.floor(Math.random() * 50), 100 - (summary.total_cpu_usage || 0)),\n      memory_usage: Math.floor(Math.random() * 5000),\n      status: 'Scheduled',\n      remainingTasks: 5 // Ensure new VMs have remainingTasks initialized\n    };\n  \n    setVms([...vms, newVm]);\n    setSimulation([...simulation, newVm]);\n    setSummary(prevSummary => ({\n      ...prevSummary,\n      total_cpu_usage: (prevSummary.total_cpu_usage || 0) + newVm.cpu_usage,\n      total_memory_usage: (prevSummary.total_memory_usage || 0) + newVm.memory_usage,\n      vm_count: (prevSummary.vm_count || 0) + 1\n    }));\n  };\n  \n\n  // Enable the Restart button when all tasks are completed\n  useEffect(() => {\n    const allCompleted = simulation.length > 0 && simulation.every(vm => vm.status === 'Completed');\n    if (allCompleted) {\n      setCanRestart(true); // Enable the Restart button\n      setIsScheduling(false); // Ensure scheduling is marked as finished\n    }\n  }, [simulation]);\n\n  useEffect(() => {\n    fetchVms();\n    fetchSummary();\n    fetchPredictions();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h1>Virtual Machine Resource Allocator</h1>\n      <div className=\"summary\">\n        <h2>Summary</h2>\n        <p>Total CPU Usage: {summary.total_cpu_usage}</p>\n        <p>Total Memory Usage: {summary.total_memory_usage}</p>\n        <p>VM Count: {summary.vm_count}</p>\n      </div>\n\n      <div className=\"vms\">\n        <h2>Virtual Machines</h2>\n        {simulation.length > 0 ? (\n          <table>\n            <thead>\n              <tr>\n                <th>ID</th>\n                <th>Name</th>\n                <th>CPU Usage</th>\n                <th>Memory Usage</th>\n                <th>Status</th>\n                <th>Remaining Tasks</th>\n                <th>Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              {simulation.map((vm, index) => (\n                vm ? (\n                  <tr key={vm.id || index}>\n                    <td>{vm.id}</td>\n                    <td>{vm.name}</td>\n                    <td>{vm.cpu_usage}</td>\n                    <td>{vm.memory_usage}</td>\n                    <td>{vm.status}</td>\n                    <td>{vm.remainingTasks ?? 0}</td>\n                    <td>\n                      <button\n                        onClick={() => allocateResources(vm.id, vm.cpu_usage + 10, vm.memory_usage + 512)}\n                        disabled={vm.status === 'Completed'}\n                      >\n                        Allocate Resources\n                      </button>\n                    </td>\n                  </tr>\n                ) : null\n              ))}\n            </tbody>\n          </table>\n        ) : (\n          <p>No VMs available. Please add VMs to start scheduling.</p>\n        )}\n        <button onClick={addVm} disabled={summary.total_cpu_usage >= 100 || isScheduling}>\n          Add VM\n        </button>\n        <button onClick={restart} disabled={!canRestart}>\n          Restart\n        </button>\n      </div>\n\n      <div className=\"gantt\">\n        <h2>Task Gantt Chart</h2>\n        <GanttChart tasks={tasks} />\n      </div>\n\n      <div className=\"actions\">\n        <button onClick={scheduleVms} disabled={isScheduling || !simulation.length}>\n          Apply Round-Robin Scheduling\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}