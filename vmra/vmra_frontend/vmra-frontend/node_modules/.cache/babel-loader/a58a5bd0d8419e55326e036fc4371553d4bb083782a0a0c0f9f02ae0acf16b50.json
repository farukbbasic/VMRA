{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Korisnik\\\\Desktop\\\\vmra project\\\\vmra_frontend\\\\vmra-frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// Importing necessary libraries\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport GanttChart from './GanttChart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [vms, setVms] = useState([]);\n  const [summary, setSummary] = useState({});\n  const [predictions, setPredictions] = useState([]);\n  const [simulation, setSimulation] = useState([]);\n  const [tasks, setTasks] = useState([]); // For storing tasks for Gantt chart\n\n  // Fetch VMs data\n  const fetchVms = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/vms');\n      setVms(response.data);\n    } catch (error) {\n      console.error('Error fetching VMs:', error);\n    }\n  };\n\n  // Fetch summary data\n  const fetchSummary = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/summary');\n      setSummary(response.data);\n    } catch (error) {\n      console.error('Error fetching summary:', error);\n    }\n  };\n\n  // Fetch predictions\n  const fetchPredictions = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/predict');\n      setPredictions(response.data);\n    } catch (error) {\n      console.error('Error fetching predictions:', error);\n    }\n  };\n\n  // Allocate resources to a VM\n  const allocateResources = async (vmId, cpu, memory) => {\n    try {\n      await axios.post('http://localhost:5000/allocate', {\n        vm_id: vmId,\n        cpu: cpu,\n        memory: memory\n      });\n      fetchVms();\n    } catch (error) {\n      console.error('Error allocating resources:', error);\n    }\n  };\n\n  // Apply round-robin scheduling and simulate execution\n  const scheduleVms = async () => {\n    try {\n      const response = await axios.post('http://localhost:5000/schedule');\n      fetchVms();\n\n      // Initialize simulation state\n      const taskQueue = response.data.vms.map(vm => ({\n        ...vm,\n        remainingTasks: 5\n      }));\n      setSimulation(taskQueue);\n\n      // Initialize Gantt chart tasks\n      const ganttTasks = response.data.vms.map(vm => ({\n        id: vm.id,\n        name: vm.name,\n        tasks: []\n      }));\n      const simulateExecution = () => {\n        let queueIndex = 0;\n        const interval = setInterval(() => {\n          setSimulation(prevSimulation => {\n            const updatedSimulation = [...prevSimulation];\n\n            // Process one VM at a time in round-robin order\n            const currentVM = updatedSimulation[queueIndex];\n            if (currentVM.remainingTasks > 0) {\n              const startTime = new Date();\n              currentVM.remainingTasks -= 1;\n              currentVM.cpu_usage = Math.max(currentVM.cpu_usage - 2, 0);\n              currentVM.memory_usage = Math.max(currentVM.memory_usage - 128, 0);\n              currentVM.status = currentVM.remainingTasks === 0 ? 'Completed' : 'Running';\n\n              // Set CPU and memory to 0 when tasks are completed\n              if (currentVM.remainingTasks === 0) {\n                currentVM.cpu_usage = 0;\n                currentVM.memory_usage = 0;\n              }\n\n              // Add task to Gantt chart\n              const endTime = new Date(startTime.getTime() + 1000); // 1 second per task\n              const ganttTask = {\n                vmId: currentVM.id,\n                taskName: `Task ${5 - currentVM.remainingTasks}`,\n                startTime,\n                endTime\n              };\n              setTasks(prevTasks => [...prevTasks, ganttTask]);\n            }\n            queueIndex = (queueIndex + 1) % updatedSimulation.length;\n            return updatedSimulation;\n          });\n\n          // Check if all tasks are completed\n          const allCompleted = simulation.every(vm => vm.remainingTasks === 0);\n          if (allCompleted) {\n            clearInterval(interval);\n          }\n        }, 1000); // Execute every second\n      };\n      simulateExecution();\n    } catch (error) {\n      console.error('Error scheduling VMs:', error);\n    }\n  };\n  // Add a new VM dynamically\n  const addVm = () => {\n    const newVm = {\n      id: vms.length + 1,\n      name: `VM${vms.length + 1}`,\n      cpu_usage: Math.floor(Math.random() * 50),\n      memory_usage: Math.floor(Math.random() * 5000),\n      status: 'Running'\n    };\n    setVms([...vms, newVm]);\n  };\n  /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"vms\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Virtual Machines\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"CPU Usage\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Memory Usage\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Actions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: vms.map(vm => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: vm.id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: vm.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: vm.cpu_usage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: vm.memory_usage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: vm.status\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => allocateResources(vm.id, vm.cpu_usage + 10, vm.memory_usage + 512),\n              children: \"Allocate Resources\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 17\n          }, this)]\n        }, vm.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addVm,\n      children: \"Add VM\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 3\n  }, this);\n  useEffect(() => {\n    fetchVms();\n    fetchSummary();\n    fetchPredictions();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Virtual Machine Resource Allocator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"summary\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Summary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Total CPU Usage: \", summary.total_cpu_usage]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Total Memory Usage: \", summary.total_memory_usage]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"VM Count: \", summary.vm_count]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"vms\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Virtual Machines\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"CPU Usage\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Memory Usage\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Status\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Remaining Tasks\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Actions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: simulation.map(vm => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: vm.id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: vm.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: vm.cpu_usage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: vm.memory_usage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: vm.status\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: vm.remainingTasks\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => allocateResources(vm.id, vm.cpu_usage + 10, vm.memory_usage + 512),\n                disabled: vm.status === 'Completed',\n                children: \"Allocate Resources\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 212,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 17\n            }, this)]\n          }, vm.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gantt\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Task Gantt Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GanttChart, {\n        tasks: tasks\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: scheduleVms,\n        children: \"Apply Round-Robin Scheduling\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"VKQwRyOFwj1+3dCDhHMWh0pyS1U=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","GanttChart","jsxDEV","_jsxDEV","App","_s","vms","setVms","summary","setSummary","predictions","setPredictions","simulation","setSimulation","tasks","setTasks","fetchVms","response","get","data","error","console","fetchSummary","fetchPredictions","allocateResources","vmId","cpu","memory","post","vm_id","scheduleVms","taskQueue","map","vm","remainingTasks","ganttTasks","id","name","simulateExecution","queueIndex","interval","setInterval","prevSimulation","updatedSimulation","currentVM","startTime","Date","cpu_usage","Math","max","memory_usage","status","endTime","getTime","ganttTask","taskName","prevTasks","length","allCompleted","every","clearInterval","addVm","newVm","floor","random","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","total_cpu_usage","total_memory_usage","vm_count","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Korisnik/Desktop/vmra project/vmra_frontend/vmra-frontend/src/App.js"],"sourcesContent":["// Importing necessary libraries\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport GanttChart from './GanttChart';\n\nconst App = () => {\n  const [vms, setVms] = useState([]);\n  const [summary, setSummary] = useState({});\n  const [predictions, setPredictions] = useState([]);\n  const [simulation, setSimulation] = useState([]);\n  const [tasks, setTasks] = useState([]); // For storing tasks for Gantt chart\n\n  // Fetch VMs data\n  const fetchVms = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/vms');\n      setVms(response.data);\n    } catch (error) {\n      console.error('Error fetching VMs:', error);\n    }\n  };\n\n  // Fetch summary data\n  const fetchSummary = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/summary');\n      setSummary(response.data);\n    } catch (error) {\n      console.error('Error fetching summary:', error);\n    }\n  };\n\n  // Fetch predictions\n  const fetchPredictions = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/predict');\n      setPredictions(response.data);\n    } catch (error) {\n      console.error('Error fetching predictions:', error);\n    }\n  };\n\n  // Allocate resources to a VM\n  const allocateResources = async (vmId, cpu, memory) => {\n    try {\n      await axios.post('http://localhost:5000/allocate', {\n        vm_id: vmId,\n        cpu: cpu,\n        memory: memory,\n      });\n      fetchVms();\n    } catch (error) {\n      console.error('Error allocating resources:', error);\n    }\n  };\n\n  // Apply round-robin scheduling and simulate execution\n  const scheduleVms = async () => {\n    try {\n      const response = await axios.post('http://localhost:5000/schedule');\n      fetchVms();\n\n      // Initialize simulation state\n      const taskQueue = response.data.vms.map(vm => ({ ...vm, remainingTasks: 5 }));\n      setSimulation(taskQueue);\n\n      // Initialize Gantt chart tasks\n      const ganttTasks = response.data.vms.map(vm => ({\n        id: vm.id,\n        name: vm.name,\n        tasks: [],\n      }));\n\n      const simulateExecution = () => {\n        let queueIndex = 0;\n\n        const interval = setInterval(() => {\n          setSimulation(prevSimulation => {\n            const updatedSimulation = [...prevSimulation];\n\n            // Process one VM at a time in round-robin order\n            const currentVM = updatedSimulation[queueIndex];\n            if (currentVM.remainingTasks > 0) {\n              const startTime = new Date();\n              currentVM.remainingTasks -= 1;\n              currentVM.cpu_usage = Math.max(currentVM.cpu_usage - 2, 0);\n              currentVM.memory_usage = Math.max(currentVM.memory_usage - 128, 0);\n              currentVM.status = currentVM.remainingTasks === 0 ? 'Completed' : 'Running';\n\n              // Set CPU and memory to 0 when tasks are completed\n              if (currentVM.remainingTasks === 0) {\n                currentVM.cpu_usage = 0;\n                currentVM.memory_usage = 0;\n              }\n\n              // Add task to Gantt chart\n              const endTime = new Date(startTime.getTime() + 1000); // 1 second per task\n              const ganttTask = {\n                vmId: currentVM.id,\n                taskName: `Task ${5 - currentVM.remainingTasks}`,\n                startTime,\n                endTime,\n              };\n              setTasks(prevTasks => [...prevTasks, ganttTask]);\n            }\n\n            queueIndex = (queueIndex + 1) % updatedSimulation.length;\n\n            return updatedSimulation;\n          });\n\n          // Check if all tasks are completed\n          const allCompleted = simulation.every(vm => vm.remainingTasks === 0);\n          if (allCompleted) {\n            clearInterval(interval);\n          }\n        }, 1000); // Execute every second\n      };\n\n      simulateExecution();\n    } catch (error) {\n      console.error('Error scheduling VMs:', error);\n    }\n  };\n  // Add a new VM dynamically\n  const addVm = () => {\n    const newVm = {\n      id: vms.length + 1,\n      name: `VM${vms.length + 1}`,\n      cpu_usage: Math.floor(Math.random() * 50),\n      memory_usage: Math.floor(Math.random() * 5000),\n      status: 'Running',\n    };\n    setVms([...vms, newVm]);\n  };\n  <div className=\"vms\">\n        <h2>Virtual Machines</h2>\n        <table>\n          <thead>\n            <tr>\n              <th>ID</th>\n              <th>Name</th>\n              <th>CPU Usage</th>\n              <th>Memory Usage</th>\n              <th>Status</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {vms.map((vm) => (\n              <tr key={vm.id}>\n                <td>{vm.id}</td>\n                <td>{vm.name}</td>\n                <td>{vm.cpu_usage}</td>\n                <td>{vm.memory_usage}</td>\n                <td>{vm.status}</td>\n                <td>\n                  <button\n                    onClick={() => allocateResources(vm.id, vm.cpu_usage + 10, vm.memory_usage + 512)}\n                  >\n                    Allocate Resources\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n        <button onClick={addVm}>Add VM</button>\n      </div>\n\n  useEffect(() => {\n    fetchVms();\n    fetchSummary();\n    fetchPredictions();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h1>Virtual Machine Resource Allocator</h1>\n      <div className=\"summary\">\n        <h2>Summary</h2>\n        <p>Total CPU Usage: {summary.total_cpu_usage}</p>\n        <p>Total Memory Usage: {summary.total_memory_usage}</p>\n        <p>VM Count: {summary.vm_count}</p>\n      </div>\n\n      <div className=\"vms\">\n        <h2>Virtual Machines</h2>\n        <table>\n          <thead>\n            <tr>\n              <th>ID</th>\n              <th>Name</th>\n              <th>CPU Usage</th>\n              <th>Memory Usage</th>\n              <th>Status</th>\n              <th>Remaining Tasks</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {simulation.map(vm => (\n              <tr key={vm.id}>\n                <td>{vm.id}</td>\n                <td>{vm.name}</td>\n                <td>{vm.cpu_usage}</td>\n                <td>{vm.memory_usage}</td>\n                <td>{vm.status}</td>\n                <td>{vm.remainingTasks}</td>\n                <td>\n                  <button\n                    onClick={() => allocateResources(vm.id, vm.cpu_usage + 10, vm.memory_usage + 512)}\n                    disabled={vm.status === 'Completed'}\n                  >\n                    Allocate Resources\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      <div className=\"gantt\">\n        <h2>Task Gantt Chart</h2>\n        <GanttChart tasks={tasks} />\n      </div>\n\n      <div className=\"actions\">\n        <button onClick={scheduleVms}>Apply Round-Robin Scheduling</button>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,WAAW;AAClB,OAAOC,UAAU,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAClC,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC1C,MAAM,CAACY,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACc,UAAU,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACgB,KAAK,EAAEC,QAAQ,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAExC;EACA,MAAMkB,QAAQ,GAAG,MAAAA,CAAA,KAAY;IAC3B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMjB,KAAK,CAACkB,GAAG,CAAC,2BAA2B,CAAC;MAC7DX,MAAM,CAACU,QAAQ,CAACE,IAAI,CAAC;IACvB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC7C;EACF,CAAC;;EAED;EACA,MAAME,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI;MACF,MAAML,QAAQ,GAAG,MAAMjB,KAAK,CAACkB,GAAG,CAAC,+BAA+B,CAAC;MACjET,UAAU,CAACQ,QAAQ,CAACE,IAAI,CAAC;IAC3B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACjD;EACF,CAAC;;EAED;EACA,MAAMG,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC,IAAI;MACF,MAAMN,QAAQ,GAAG,MAAMjB,KAAK,CAACkB,GAAG,CAAC,+BAA+B,CAAC;MACjEP,cAAc,CAACM,QAAQ,CAACE,IAAI,CAAC;IAC/B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACrD;EACF,CAAC;;EAED;EACA,MAAMI,iBAAiB,GAAG,MAAAA,CAAOC,IAAI,EAAEC,GAAG,EAAEC,MAAM,KAAK;IACrD,IAAI;MACF,MAAM3B,KAAK,CAAC4B,IAAI,CAAC,gCAAgC,EAAE;QACjDC,KAAK,EAAEJ,IAAI;QACXC,GAAG,EAAEA,GAAG;QACRC,MAAM,EAAEA;MACV,CAAC,CAAC;MACFX,QAAQ,CAAC,CAAC;IACZ,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACrD;EACF,CAAC;;EAED;EACA,MAAMU,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACF,MAAMb,QAAQ,GAAG,MAAMjB,KAAK,CAAC4B,IAAI,CAAC,gCAAgC,CAAC;MACnEZ,QAAQ,CAAC,CAAC;;MAEV;MACA,MAAMe,SAAS,GAAGd,QAAQ,CAACE,IAAI,CAACb,GAAG,CAAC0B,GAAG,CAACC,EAAE,KAAK;QAAE,GAAGA,EAAE;QAAEC,cAAc,EAAE;MAAE,CAAC,CAAC,CAAC;MAC7ErB,aAAa,CAACkB,SAAS,CAAC;;MAExB;MACA,MAAMI,UAAU,GAAGlB,QAAQ,CAACE,IAAI,CAACb,GAAG,CAAC0B,GAAG,CAACC,EAAE,KAAK;QAC9CG,EAAE,EAAEH,EAAE,CAACG,EAAE;QACTC,IAAI,EAAEJ,EAAE,CAACI,IAAI;QACbvB,KAAK,EAAE;MACT,CAAC,CAAC,CAAC;MAEH,MAAMwB,iBAAiB,GAAGA,CAAA,KAAM;QAC9B,IAAIC,UAAU,GAAG,CAAC;QAElB,MAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAM;UACjC5B,aAAa,CAAC6B,cAAc,IAAI;YAC9B,MAAMC,iBAAiB,GAAG,CAAC,GAAGD,cAAc,CAAC;;YAE7C;YACA,MAAME,SAAS,GAAGD,iBAAiB,CAACJ,UAAU,CAAC;YAC/C,IAAIK,SAAS,CAACV,cAAc,GAAG,CAAC,EAAE;cAChC,MAAMW,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC;cAC5BF,SAAS,CAACV,cAAc,IAAI,CAAC;cAC7BU,SAAS,CAACG,SAAS,GAAGC,IAAI,CAACC,GAAG,CAACL,SAAS,CAACG,SAAS,GAAG,CAAC,EAAE,CAAC,CAAC;cAC1DH,SAAS,CAACM,YAAY,GAAGF,IAAI,CAACC,GAAG,CAACL,SAAS,CAACM,YAAY,GAAG,GAAG,EAAE,CAAC,CAAC;cAClEN,SAAS,CAACO,MAAM,GAAGP,SAAS,CAACV,cAAc,KAAK,CAAC,GAAG,WAAW,GAAG,SAAS;;cAE3E;cACA,IAAIU,SAAS,CAACV,cAAc,KAAK,CAAC,EAAE;gBAClCU,SAAS,CAACG,SAAS,GAAG,CAAC;gBACvBH,SAAS,CAACM,YAAY,GAAG,CAAC;cAC5B;;cAEA;cACA,MAAME,OAAO,GAAG,IAAIN,IAAI,CAACD,SAAS,CAACQ,OAAO,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;cACtD,MAAMC,SAAS,GAAG;gBAChB7B,IAAI,EAAEmB,SAAS,CAACR,EAAE;gBAClBmB,QAAQ,EAAE,QAAQ,CAAC,GAAGX,SAAS,CAACV,cAAc,EAAE;gBAChDW,SAAS;gBACTO;cACF,CAAC;cACDrC,QAAQ,CAACyC,SAAS,IAAI,CAAC,GAAGA,SAAS,EAAEF,SAAS,CAAC,CAAC;YAClD;YAEAf,UAAU,GAAG,CAACA,UAAU,GAAG,CAAC,IAAII,iBAAiB,CAACc,MAAM;YAExD,OAAOd,iBAAiB;UAC1B,CAAC,CAAC;;UAEF;UACA,MAAMe,YAAY,GAAG9C,UAAU,CAAC+C,KAAK,CAAC1B,EAAE,IAAIA,EAAE,CAACC,cAAc,KAAK,CAAC,CAAC;UACpE,IAAIwB,YAAY,EAAE;YAChBE,aAAa,CAACpB,QAAQ,CAAC;UACzB;QACF,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;MACZ,CAAC;MAEDF,iBAAiB,CAAC,CAAC;IACrB,CAAC,CAAC,OAAOlB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C;EACF,CAAC;EACD;EACA,MAAMyC,KAAK,GAAGA,CAAA,KAAM;IAClB,MAAMC,KAAK,GAAG;MACZ1B,EAAE,EAAE9B,GAAG,CAACmD,MAAM,GAAG,CAAC;MAClBpB,IAAI,EAAE,KAAK/B,GAAG,CAACmD,MAAM,GAAG,CAAC,EAAE;MAC3BV,SAAS,EAAEC,IAAI,CAACe,KAAK,CAACf,IAAI,CAACgB,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;MACzCd,YAAY,EAAEF,IAAI,CAACe,KAAK,CAACf,IAAI,CAACgB,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC;MAC9Cb,MAAM,EAAE;IACV,CAAC;IACD5C,MAAM,CAAC,CAAC,GAAGD,GAAG,EAAEwD,KAAK,CAAC,CAAC;EACzB,CAAC;EACD,aAAA3D,OAAA;IAAK8D,SAAS,EAAC,KAAK;IAAAC,QAAA,gBACd/D,OAAA;MAAA+D,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACzBnE,OAAA;MAAA+D,QAAA,gBACE/D,OAAA;QAAA+D,QAAA,eACE/D,OAAA;UAAA+D,QAAA,gBACE/D,OAAA;YAAA+D,QAAA,EAAI;UAAE;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACXnE,OAAA;YAAA+D,QAAA,EAAI;UAAI;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACbnE,OAAA;YAAA+D,QAAA,EAAI;UAAS;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAClBnE,OAAA;YAAA+D,QAAA,EAAI;UAAY;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACrBnE,OAAA;YAAA+D,QAAA,EAAI;UAAM;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACfnE,OAAA;YAAA+D,QAAA,EAAI;UAAO;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACd;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,eACRnE,OAAA;QAAA+D,QAAA,EACG5D,GAAG,CAAC0B,GAAG,CAAEC,EAAE,iBACV9B,OAAA;UAAA+D,QAAA,gBACE/D,OAAA;YAAA+D,QAAA,EAAKjC,EAAE,CAACG;UAAE;YAAA+B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAChBnE,OAAA;YAAA+D,QAAA,EAAKjC,EAAE,CAACI;UAAI;YAAA8B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAClBnE,OAAA;YAAA+D,QAAA,EAAKjC,EAAE,CAACc;UAAS;YAAAoB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACvBnE,OAAA;YAAA+D,QAAA,EAAKjC,EAAE,CAACiB;UAAY;YAAAiB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAC1BnE,OAAA;YAAA+D,QAAA,EAAKjC,EAAE,CAACkB;UAAM;YAAAgB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACpBnE,OAAA;YAAA+D,QAAA,eACE/D,OAAA;cACEoE,OAAO,EAAEA,CAAA,KAAM/C,iBAAiB,CAACS,EAAE,CAACG,EAAE,EAAEH,EAAE,CAACc,SAAS,GAAG,EAAE,EAAEd,EAAE,CAACiB,YAAY,GAAG,GAAG,CAAE;cAAAgB,QAAA,EACnF;YAED;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACP,CAAC;QAAA,GAZErC,EAAE,CAACG,EAAE;UAAA+B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAaV,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eACRnE,OAAA;MAAQoE,OAAO,EAAEV,KAAM;MAAAK,QAAA,EAAC;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpC,CAAC;EAEVvE,SAAS,CAAC,MAAM;IACdiB,QAAQ,CAAC,CAAC;IACVM,YAAY,CAAC,CAAC;IACdC,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEpB,OAAA;IAAK8D,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClB/D,OAAA;MAAA+D,QAAA,EAAI;IAAkC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC3CnE,OAAA;MAAK8D,SAAS,EAAC,SAAS;MAAAC,QAAA,gBACtB/D,OAAA;QAAA+D,QAAA,EAAI;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAChBnE,OAAA;QAAA+D,QAAA,GAAG,mBAAiB,EAAC1D,OAAO,CAACgE,eAAe;MAAA;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACjDnE,OAAA;QAAA+D,QAAA,GAAG,sBAAoB,EAAC1D,OAAO,CAACiE,kBAAkB;MAAA;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACvDnE,OAAA;QAAA+D,QAAA,GAAG,YAAU,EAAC1D,OAAO,CAACkE,QAAQ;MAAA;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC,CAAC,eAENnE,OAAA;MAAK8D,SAAS,EAAC,KAAK;MAAAC,QAAA,gBAClB/D,OAAA;QAAA+D,QAAA,EAAI;MAAgB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACzBnE,OAAA;QAAA+D,QAAA,gBACE/D,OAAA;UAAA+D,QAAA,eACE/D,OAAA;YAAA+D,QAAA,gBACE/D,OAAA;cAAA+D,QAAA,EAAI;YAAE;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACXnE,OAAA;cAAA+D,QAAA,EAAI;YAAI;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACbnE,OAAA;cAAA+D,QAAA,EAAI;YAAS;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAClBnE,OAAA;cAAA+D,QAAA,EAAI;YAAY;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACrBnE,OAAA;cAAA+D,QAAA,EAAI;YAAM;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACfnE,OAAA;cAAA+D,QAAA,EAAI;YAAe;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACxBnE,OAAA;cAAA+D,QAAA,EAAI;YAAO;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACd;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC,eACRnE,OAAA;UAAA+D,QAAA,EACGtD,UAAU,CAACoB,GAAG,CAACC,EAAE,iBAChB9B,OAAA;YAAA+D,QAAA,gBACE/D,OAAA;cAAA+D,QAAA,EAAKjC,EAAE,CAACG;YAAE;cAAA+B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eAChBnE,OAAA;cAAA+D,QAAA,EAAKjC,EAAE,CAACI;YAAI;cAAA8B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eAClBnE,OAAA;cAAA+D,QAAA,EAAKjC,EAAE,CAACc;YAAS;cAAAoB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eACvBnE,OAAA;cAAA+D,QAAA,EAAKjC,EAAE,CAACiB;YAAY;cAAAiB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eAC1BnE,OAAA;cAAA+D,QAAA,EAAKjC,EAAE,CAACkB;YAAM;cAAAgB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eACpBnE,OAAA;cAAA+D,QAAA,EAAKjC,EAAE,CAACC;YAAc;cAAAiC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eAC5BnE,OAAA;cAAA+D,QAAA,eACE/D,OAAA;gBACEoE,OAAO,EAAEA,CAAA,KAAM/C,iBAAiB,CAACS,EAAE,CAACG,EAAE,EAAEH,EAAE,CAACc,SAAS,GAAG,EAAE,EAAEd,EAAE,CAACiB,YAAY,GAAG,GAAG,CAAE;gBAClFyB,QAAQ,EAAE1C,EAAE,CAACkB,MAAM,KAAK,WAAY;gBAAAe,QAAA,EACrC;cAED;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACP,CAAC;UAAA,GAdErC,EAAE,CAACG,EAAE;YAAA+B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAeV,CACL;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,eAENnE,OAAA;MAAK8D,SAAS,EAAC,OAAO;MAAAC,QAAA,gBACpB/D,OAAA;QAAA+D,QAAA,EAAI;MAAgB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACzBnE,OAAA,CAACF,UAAU;QAACa,KAAK,EAAEA;MAAM;QAAAqD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzB,CAAC,eAENnE,OAAA;MAAK8D,SAAS,EAAC,SAAS;MAAAC,QAAA,eACtB/D,OAAA;QAAQoE,OAAO,EAAEzC,WAAY;QAAAoC,QAAA,EAAC;MAA4B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACjE,EAAA,CApOID,GAAG;AAAAwE,EAAA,GAAHxE,GAAG;AAsOT,eAAeA,GAAG;AAAC,IAAAwE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}