{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Korisnik\\\\Desktop\\\\vmra project\\\\vmra_frontend\\\\vmra-frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// Importing necessary libraries\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport GanttChart from './GanttChart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [vms, setVms] = useState([]);\n  const [summary, setSummary] = useState({});\n  const [predictions, setPredictions] = useState([]);\n  const [simulation, setSimulation] = useState([]);\n  const [tasks, setTasks] = useState([]); // For storing tasks for Gantt chart\n  const [isScheduling, setIsScheduling] = useState(false); // Track if scheduling is in progress\n  const [canRestart, setCanRestart] = useState(false); // Track if restart is allowed\n\n  // Fetch VMs data\n  const fetchVms = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/vms');\n      setVms(response.data);\n    } catch (error) {\n      console.error('Error fetching VMs:', error);\n    }\n  };\n\n  // Fetch summary data\n  const fetchSummary = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/summary');\n      setSummary(response.data);\n    } catch (error) {\n      console.error('Error fetching summary:', error);\n    }\n  };\n\n  // Fetch predictions\n  const fetchPredictions = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/predict');\n      setPredictions(response.data);\n    } catch (error) {\n      console.error('Error fetching predictions:', error);\n    }\n  };\n\n  // Allocate resources to a VM\n  const allocateResources = async (vmId, cpu, memory) => {\n    try {\n      await axios.post('http://localhost:5000/allocate', {\n        vm_id: vmId,\n        cpu: cpu,\n        memory: memory\n      });\n      fetchVms();\n    } catch (error) {\n      console.error('Error allocating resources:', error);\n    }\n  };\n\n  // Apply round-robin scheduling and simulate execution\n  const scheduleVms = async () => {\n    try {\n      setIsScheduling(true); // Disable restart during scheduling\n      setCanRestart(false); // Disable restart button\n      const response = await axios.post('http://localhost:5000/schedule');\n      setSimulation(prevSimulation => prevSimulation.map(vm => ({\n        ...vm,\n        status: 'Running'\n      })));\n      let currentTime = new Date().getTime(); // Start time tracking\n\n      const simulateExecution = () => {\n        let queueIndex = 0;\n        const interval = setInterval(() => {\n          setSimulation(prevSimulation => {\n            const updatedSimulation = [...prevSimulation];\n\n            // Process one VM at a time in round-robin order\n            const currentVM = updatedSimulation[queueIndex];\n            if (currentVM.remainingTasks > 0) {\n              const startTime = new Date(currentTime);\n              currentTime += 1000; // Increment time for the next task\n              const endTime = new Date(currentTime);\n              currentVM.remainingTasks -= 1;\n              currentVM.cpu_usage = Math.max(currentVM.cpu_usage - 2, 0);\n              currentVM.memory_usage = Math.max(currentVM.memory_usage - 128, 0);\n              currentVM.status = currentVM.remainingTasks === 0 ? 'Completed' : 'Running';\n\n              // Set CPU and memory to 0 when tasks are completed\n              if (currentVM.remainingTasks === 0) {\n                currentVM.cpu_usage = 0;\n                currentVM.memory_usage = 0;\n              }\n\n              // Add task to Gantt chart\n              const ganttTask = {\n                vmId: currentVM.id,\n                taskName: `Task ${5 - currentVM.remainingTasks}`,\n                startTime,\n                endTime,\n                color: currentVM.id % 2 === 0 ? 'blue' : 'orange' // Alternate colors for tasks\n              };\n              setTasks(prevTasks => [...prevTasks, ganttTask]);\n            }\n            queueIndex = (queueIndex + 1) % updatedSimulation.length;\n            return updatedSimulation;\n          });\n\n          // Check if all tasks are completed\n          const allCompleted = simulation.every(vm => vm.remainingTasks === 0);\n          if (allCompleted) {\n            clearInterval(interval);\n\n            // Allow restart after scheduling is finished\n            setIsScheduling(false);\n          }\n        }, 1000); // Execute every second\n      };\n      simulateExecution();\n    } catch (error) {\n      console.error('Error scheduling VMs:', error);\n    }\n  };\n\n  // Add a new VM dynamically\n  const addVm = () => {\n    if (summary.total_cpu_usage >= 100) {\n      alert('Cannot add more VMs: CPU usage limit reached');\n      return;\n    }\n    setCanRestart(false); // Disable restart button during VM addition\n\n    const newVm = {\n      id: vms.length + 1,\n      name: `VM${vms.length + 1}`,\n      cpu_usage: Math.min(Math.floor(Math.random() * 50), 100 - summary.total_cpu_usage),\n      memory_usage: Math.floor(Math.random() * 5000),\n      status: 'Scheduled',\n      remainingTasks: 5\n    };\n    setVms([...vms, newVm]);\n    setSimulation([...simulation, newVm]);\n    setSummary(prevSummary => ({\n      ...prevSummary,\n      total_cpu_usage: (prevSummary.total_cpu_usage || 0) + newVm.cpu_usage,\n      total_memory_usage: (prevSummary.total_memory_usage || 0) + newVm.memory_usage,\n      vm_count: (prevSummary.vm_count || 0) + 1\n    }));\n  };\n\n  // Restart the process by clearing all data\n  const restart = () => {\n    setVms([]);\n    setSummary({});\n    setSimulation([]);\n    setTasks([]);\n    setCanRestart(false); // Disable restart button after reset\n  };\n\n  // Enable the Restart button when all tasks are completed\n  useEffect(() => {\n    const allCompleted = simulation.length > 0 && simulation.every(vm => vm.status === 'Completed');\n    if (allCompleted) {\n      setCanRestart(true); // Enable the Restart button\n      setIsScheduling(false); // Ensure scheduling is marked as finished\n    }\n  }, [simulation]);\n  useEffect(() => {\n    fetchVms();\n    fetchSummary();\n    fetchPredictions();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Virtual Machine Resource Allocator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"summary\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Summary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Total CPU Usage: \", summary.total_cpu_usage]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Total Memory Usage: \", summary.total_memory_usage]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"VM Count: \", summary.vm_count]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"vms\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Virtual Machines\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"CPU Usage\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Memory Usage\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Status\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Remaining Tasks\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Actions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: simulation.map(vm => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: vm.id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: vm.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: vm.cpu_usage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: vm.memory_usage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: vm.status\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: vm.remainingTasks\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => allocateResources(vm.id, vm.cpu_usage + 10, vm.memory_usage + 512),\n                disabled: vm.status === 'Completed',\n                children: \"Allocate Resources\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 216,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 17\n            }, this)]\n          }, vm.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addVm,\n        disabled: summary.total_cpu_usage >= 100 || isScheduling,\n        children: \"Add VM\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: restart,\n        disabled: !canRestart,\n        children: \"Restart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gantt\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Task Gantt Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GanttChart, {\n        tasks: tasks\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: scheduleVms,\n        disabled: isScheduling || !simulation.length,\n        children: \"Apply Round-Robin Scheduling\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"b3js2BzfnaOf5x5GQUXi9cT0gZE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","GanttChart","jsxDEV","_jsxDEV","App","_s","vms","setVms","summary","setSummary","predictions","setPredictions","simulation","setSimulation","tasks","setTasks","isScheduling","setIsScheduling","canRestart","setCanRestart","fetchVms","response","get","data","error","console","fetchSummary","fetchPredictions","allocateResources","vmId","cpu","memory","post","vm_id","scheduleVms","prevSimulation","map","vm","status","currentTime","Date","getTime","simulateExecution","queueIndex","interval","setInterval","updatedSimulation","currentVM","remainingTasks","startTime","endTime","cpu_usage","Math","max","memory_usage","ganttTask","id","taskName","color","prevTasks","length","allCompleted","every","clearInterval","addVm","total_cpu_usage","alert","newVm","name","min","floor","random","prevSummary","total_memory_usage","vm_count","restart","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Korisnik/Desktop/vmra project/vmra_frontend/vmra-frontend/src/App.js"],"sourcesContent":["// Importing necessary libraries\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport GanttChart from './GanttChart';\n\nconst App = () => {\n  const [vms, setVms] = useState([]);\n  const [summary, setSummary] = useState({});\n  const [predictions, setPredictions] = useState([]);\n  const [simulation, setSimulation] = useState([]);\n  const [tasks, setTasks] = useState([]); // For storing tasks for Gantt chart\n  const [isScheduling, setIsScheduling] = useState(false); // Track if scheduling is in progress\n  const [canRestart, setCanRestart] = useState(false); // Track if restart is allowed\n\n  // Fetch VMs data\n  const fetchVms = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/vms');\n      setVms(response.data);\n    } catch (error) {\n      console.error('Error fetching VMs:', error);\n    }\n  };\n\n  // Fetch summary data\n  const fetchSummary = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/summary');\n      setSummary(response.data);\n    } catch (error) {\n      console.error('Error fetching summary:', error);\n    }\n  };\n\n  // Fetch predictions\n  const fetchPredictions = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/predict');\n      setPredictions(response.data);\n    } catch (error) {\n      console.error('Error fetching predictions:', error);\n    }\n  };\n\n  // Allocate resources to a VM\n  const allocateResources = async (vmId, cpu, memory) => {\n    try {\n      await axios.post('http://localhost:5000/allocate', {\n        vm_id: vmId,\n        cpu: cpu,\n        memory: memory,\n      });\n      fetchVms();\n    } catch (error) {\n      console.error('Error allocating resources:', error);\n    }\n  };\n\n  // Apply round-robin scheduling and simulate execution\n  const scheduleVms = async () => {\n    try {\n      setIsScheduling(true); // Disable restart during scheduling\n      setCanRestart(false); // Disable restart button\n      const response = await axios.post('http://localhost:5000/schedule');\n      setSimulation(prevSimulation => prevSimulation.map(vm => ({\n        ...vm,\n        status: 'Running'\n      })));\n\n      let currentTime = new Date().getTime(); // Start time tracking\n\n      const simulateExecution = () => {\n        let queueIndex = 0;\n\n        const interval = setInterval(() => {\n          setSimulation(prevSimulation => {\n            const updatedSimulation = [...prevSimulation];\n\n            // Process one VM at a time in round-robin order\n            const currentVM = updatedSimulation[queueIndex];\n            if (currentVM.remainingTasks > 0) {\n              const startTime = new Date(currentTime);\n              currentTime += 1000; // Increment time for the next task\n              const endTime = new Date(currentTime);\n\n              currentVM.remainingTasks -= 1;\n              currentVM.cpu_usage = Math.max(currentVM.cpu_usage - 2, 0);\n              currentVM.memory_usage = Math.max(currentVM.memory_usage - 128, 0);\n              currentVM.status = currentVM.remainingTasks === 0 ? 'Completed' : 'Running';\n\n              // Set CPU and memory to 0 when tasks are completed\n              if (currentVM.remainingTasks === 0) {\n                currentVM.cpu_usage = 0;\n                currentVM.memory_usage = 0;\n              }\n\n              // Add task to Gantt chart\n              const ganttTask = {\n                vmId: currentVM.id,\n                taskName: `Task ${5 - currentVM.remainingTasks}`,\n                startTime,\n                endTime,\n                color: currentVM.id % 2 === 0 ? 'blue' : 'orange' // Alternate colors for tasks\n              };\n              setTasks(prevTasks => [...prevTasks, ganttTask]);\n            }\n\n            queueIndex = (queueIndex + 1) % updatedSimulation.length;\n\n            return updatedSimulation;\n          });\n\n          // Check if all tasks are completed\n          const allCompleted = simulation.every(vm => vm.remainingTasks === 0);\n          if (allCompleted) {\n            clearInterval(interval);\n\n            // Allow restart after scheduling is finished\n            setIsScheduling(false);\n          }\n        }, 1000); // Execute every second\n      };\n\n      simulateExecution();\n    } catch (error) {\n      console.error('Error scheduling VMs:', error);\n    }\n  };\n\n  // Add a new VM dynamically\n  const addVm = () => {\n    if (summary.total_cpu_usage >= 100) {\n      alert('Cannot add more VMs: CPU usage limit reached');\n      return;\n    }\n\n    setCanRestart(false); // Disable restart button during VM addition\n\n    const newVm = {\n      id: vms.length + 1,\n      name: `VM${vms.length + 1}`,\n      cpu_usage: Math.min(Math.floor(Math.random() * 50), 100 - summary.total_cpu_usage),\n      memory_usage: Math.floor(Math.random() * 5000),\n      status: 'Scheduled',\n      remainingTasks: 5\n    };\n    setVms([...vms, newVm]);\n    setSimulation([...simulation, newVm]);\n    setSummary(prevSummary => ({\n      ...prevSummary,\n      total_cpu_usage: (prevSummary.total_cpu_usage || 0) + newVm.cpu_usage,\n      total_memory_usage: (prevSummary.total_memory_usage || 0) + newVm.memory_usage,\n      vm_count: (prevSummary.vm_count || 0) + 1\n    }));\n  };\n\n  // Restart the process by clearing all data\n  const restart = () => {\n    setVms([]);\n    setSummary({});\n    setSimulation([]);\n    setTasks([]);\n    setCanRestart(false); // Disable restart button after reset\n  };\n\n  // Enable the Restart button when all tasks are completed\n  useEffect(() => {\n    const allCompleted = simulation.length > 0 && simulation.every(vm => vm.status === 'Completed');\n    if (allCompleted) {\n      setCanRestart(true); // Enable the Restart button\n      setIsScheduling(false); // Ensure scheduling is marked as finished\n    }\n  }, [simulation]);\n\n  useEffect(() => {\n    fetchVms();\n    fetchSummary();\n    fetchPredictions();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h1>Virtual Machine Resource Allocator</h1>\n      <div className=\"summary\">\n        <h2>Summary</h2>\n        <p>Total CPU Usage: {summary.total_cpu_usage}</p>\n        <p>Total Memory Usage: {summary.total_memory_usage}</p>\n        <p>VM Count: {summary.vm_count}</p>\n      </div>\n\n      <div className=\"vms\">\n        <h2>Virtual Machines</h2>\n        <table>\n          <thead>\n            <tr>\n              <th>ID</th>\n              <th>Name</th>\n              <th>CPU Usage</th>\n              <th>Memory Usage</th>\n              <th>Status</th>\n              <th>Remaining Tasks</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {simulation.map(vm => (\n              <tr key={vm.id}>\n                <td>{vm.id}</td>\n                <td>{vm.name}</td>\n                <td>{vm.cpu_usage}</td>\n                <td>{vm.memory_usage}</td>\n                <td>{vm.status}</td>\n                <td>{vm.remainingTasks}</td>\n                <td>\n                  <button\n                    onClick={() => allocateResources(vm.id, vm.cpu_usage + 10, vm.memory_usage + 512)}\n                    disabled={vm.status === 'Completed'}\n                  >\n                    Allocate Resources\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n        <button onClick={addVm} disabled={summary.total_cpu_usage >= 100 || isScheduling}>\n          Add VM\n        </button>\n        <button onClick={restart} disabled={!canRestart}>\n          Restart\n        </button>\n      </div>\n\n      <div className=\"gantt\">\n        <h2>Task Gantt Chart</h2>\n        <GanttChart tasks={tasks} />\n      </div>\n\n      <div className=\"actions\">\n        <button onClick={scheduleVms} disabled={isScheduling || !simulation.length}>\n          Apply Round-Robin Scheduling\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}