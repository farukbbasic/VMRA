{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Korisnik\\\\Desktop\\\\vmra project\\\\vmra_frontend\\\\vmra-frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// Importing necessary libraries\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport GanttChart from './GanttChart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [vms, setVms] = useState([]);\n  const [summary, setSummary] = useState({});\n  const [predictions, setPredictions] = useState([]);\n  const [simulation, setSimulation] = useState([]);\n  const [tasks, setTasks] = useState([]); // For storing tasks for Gantt chart\n\n  // Fetch VMs data\n  const fetchVms = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/vms');\n      setVms(response.data);\n    } catch (error) {\n      console.error('Error fetching VMs:', error);\n    }\n  };\n\n  // Fetch summary data\n  const fetchSummary = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/summary');\n      setSummary(response.data);\n    } catch (error) {\n      console.error('Error fetching summary:', error);\n    }\n  };\n\n  // Fetch predictions\n  const fetchPredictions = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/predict');\n      setPredictions(response.data);\n    } catch (error) {\n      console.error('Error fetching predictions:', error);\n    }\n  };\n\n  // Allocate resources to a VM\n  const allocateResources = async (vmId, cpu, memory) => {\n    try {\n      await axios.post('http://localhost:5000/allocate', {\n        vm_id: vmId,\n        cpu: cpu,\n        memory: memory\n      });\n      fetchVms();\n    } catch (error) {\n      console.error('Error allocating resources:', error);\n    }\n  };\n\n  // Apply round-robin scheduling and simulate execution\n  const scheduleVms = async () => {\n    try {\n      const response = await axios.post('http://localhost:5000/schedule');\n      setSimulation(prevSimulation => prevSimulation.map(vm => ({\n        ...vm,\n        status: 'Running'\n      })));\n\n      // Initialize simulation state with remainingTasks for each VM\n      const taskQueue = response.data.vms.map(vm => ({\n        ...vm,\n        remainingTasks: vm.remainingTasks || 5 // Default to 5 if not provided\n      }));\n\n      // Initialize Gantt chart tasks\n      const ganttTasks = response.data.vms.map(vm => ({\n        id: vm.id,\n        name: vm.name,\n        tasks: []\n      }));\n      const simulateExecution = () => {\n        let queueIndex = 0;\n        const interval = setInterval(() => {\n          setSimulation(prevSimulation => {\n            const updatedSimulation = [...prevSimulation];\n\n            // Process one VM at a time in round-robin order\n            const currentVM = updatedSimulation[queueIndex];\n            if (currentVM.remainingTasks > 0) {\n              const startTime = new Date();\n              currentVM.remainingTasks -= 1;\n              currentVM.cpu_usage = Math.max(currentVM.cpu_usage - 2, 0);\n              currentVM.memory_usage = Math.max(currentVM.memory_usage - 128, 0);\n              currentVM.status = currentVM.remainingTasks === 0 ? 'Completed' : 'Running';\n\n              // Set CPU and memory to 0 when tasks are completed\n              if (currentVM.remainingTasks === 0) {\n                currentVM.cpu_usage = 0;\n                currentVM.memory_usage = 0;\n              }\n\n              // Add task to Gantt chart\n              const endTime = new Date(startTime.getTime() + 1000); // 1 second per task\n              const ganttTask = {\n                vmId: currentVM.id,\n                taskName: `Task ${5 - currentVM.remainingTasks}`,\n                startTime,\n                endTime,\n                color: currentVM.id % 2 === 0 ? 'blue' : 'orange' // Alternate colors for tasks\n              };\n              setTasks(prevTasks => [...prevTasks, ganttTask]);\n            }\n            queueIndex = (queueIndex + 1) % updatedSimulation.length;\n            return updatedSimulation;\n          });\n\n          // Check if all tasks are completed\n          const allCompleted = simulation.every(vm => vm.remainingTasks === 0);\n          if (allCompleted) {\n            clearInterval(interval);\n          }\n        }, 1000); // Execute every second\n      };\n      simulateExecution();\n    } catch (error) {\n      console.error('Error scheduling VMs:', error);\n    }\n  };\n\n  // Add a new VM dynamically\n  const addVm = () => {\n    if (summary.total_cpu_usage >= 100) {\n      alert('Cannot add more VMs: CPU usage limit reached');\n      return;\n    }\n    const newVm = {\n      id: vms.length + 1,\n      name: `VM${vms.length + 1}`,\n      cpu_usage: Math.min(Math.floor(Math.random() * 50), 100 - summary.total_cpu_usage),\n      memory_usage: Math.floor(Math.random() * 5000),\n      status: 'Scheduled',\n      remainingTasks: 5\n    };\n    setVms([...vms, newVm]);\n    setSimulation([...simulation, newVm]);\n    setSummary(prevSummary => ({\n      ...prevSummary,\n      total_cpu_usage: (prevSummary.total_cpu_usage || 0) + newVm.cpu_usage,\n      total_memory_usage: (prevSummary.total_memory_usage || 0) + newVm.memory_usage,\n      vm_count: (prevSummary.vm_count || 0) + 1\n    }));\n  };\n  useEffect(() => {\n    fetchVms();\n    fetchSummary();\n    fetchPredictions();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Virtual Machine Resource Allocator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"summary\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Summary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Total CPU Usage: \", summary.total_cpu_usage]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Total Memory Usage: \", summary.total_memory_usage]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"VM Count: \", summary.vm_count]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"vms\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Virtual Machines\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"CPU Usage\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Memory Usage\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Status\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Remaining Tasks\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Actions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: simulation.map(vm => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: vm.id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: vm.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: vm.cpu_usage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: vm.memory_usage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: vm.status\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: vm.remainingTasks\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => allocateResources(vm.id, vm.cpu_usage + 10, vm.memory_usage + 512),\n                disabled: vm.status === 'Completed',\n                children: \"Allocate Resources\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 198,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 17\n            }, this)]\n          }, vm.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addVm,\n        disabled: summary.total_cpu_usage >= 100,\n        children: \"Add VM\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gantt\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Task Gantt Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GanttChart, {\n        tasks: tasks\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: scheduleVms,\n        children: \"Apply Round-Robin Scheduling\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"VKQwRyOFwj1+3dCDhHMWh0pyS1U=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","GanttChart","jsxDEV","_jsxDEV","App","_s","vms","setVms","summary","setSummary","predictions","setPredictions","simulation","setSimulation","tasks","setTasks","fetchVms","response","get","data","error","console","fetchSummary","fetchPredictions","allocateResources","vmId","cpu","memory","post","vm_id","scheduleVms","prevSimulation","map","vm","status","taskQueue","remainingTasks","ganttTasks","id","name","simulateExecution","queueIndex","interval","setInterval","updatedSimulation","currentVM","startTime","Date","cpu_usage","Math","max","memory_usage","endTime","getTime","ganttTask","taskName","color","prevTasks","length","allCompleted","every","clearInterval","addVm","total_cpu_usage","alert","newVm","min","floor","random","prevSummary","total_memory_usage","vm_count","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Korisnik/Desktop/vmra project/vmra_frontend/vmra-frontend/src/App.js"],"sourcesContent":["// Importing necessary libraries\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport GanttChart from './GanttChart';\n\nconst App = () => {\n  const [vms, setVms] = useState([]);\n  const [summary, setSummary] = useState({});\n  const [predictions, setPredictions] = useState([]);\n  const [simulation, setSimulation] = useState([]);\n  const [tasks, setTasks] = useState([]); // For storing tasks for Gantt chart\n\n  // Fetch VMs data\n  const fetchVms = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/vms');\n      setVms(response.data);\n    } catch (error) {\n      console.error('Error fetching VMs:', error);\n    }\n  };\n\n  // Fetch summary data\n  const fetchSummary = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/summary');\n      setSummary(response.data);\n    } catch (error) {\n      console.error('Error fetching summary:', error);\n    }\n  };\n\n  // Fetch predictions\n  const fetchPredictions = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/predict');\n      setPredictions(response.data);\n    } catch (error) {\n      console.error('Error fetching predictions:', error);\n    }\n  };\n\n  // Allocate resources to a VM\n  const allocateResources = async (vmId, cpu, memory) => {\n    try {\n      await axios.post('http://localhost:5000/allocate', {\n        vm_id: vmId,\n        cpu: cpu,\n        memory: memory,\n      });\n      fetchVms();\n    } catch (error) {\n      console.error('Error allocating resources:', error);\n    }\n  };\n\n  // Apply round-robin scheduling and simulate execution\n  const scheduleVms = async () => {\n    try {\n      const response = await axios.post('http://localhost:5000/schedule');\n      setSimulation(prevSimulation => prevSimulation.map(vm => ({\n        ...vm,\n        status: 'Running'\n      })));\n\n      // Initialize simulation state with remainingTasks for each VM\n      const taskQueue = response.data.vms.map(vm => ({\n        ...vm,\n        remainingTasks: vm.remainingTasks || 5 // Default to 5 if not provided\n      }));\n\n      // Initialize Gantt chart tasks\n      const ganttTasks = response.data.vms.map(vm => ({\n        id: vm.id,\n        name: vm.name,\n        tasks: [],\n      }));\n\n      const simulateExecution = () => {\n        let queueIndex = 0;\n\n        const interval = setInterval(() => {\n          setSimulation(prevSimulation => {\n            const updatedSimulation = [...prevSimulation];\n\n            // Process one VM at a time in round-robin order\n            const currentVM = updatedSimulation[queueIndex];\n            if (currentVM.remainingTasks > 0) {\n              const startTime = new Date();\n              currentVM.remainingTasks -= 1;\n              currentVM.cpu_usage = Math.max(currentVM.cpu_usage - 2, 0);\n              currentVM.memory_usage = Math.max(currentVM.memory_usage - 128, 0);\n              currentVM.status = currentVM.remainingTasks === 0 ? 'Completed' : 'Running';\n\n              // Set CPU and memory to 0 when tasks are completed\n              if (currentVM.remainingTasks === 0) {\n                currentVM.cpu_usage = 0;\n                currentVM.memory_usage = 0;\n              }\n\n              // Add task to Gantt chart\n              const endTime = new Date(startTime.getTime() + 1000); // 1 second per task\n              const ganttTask = {\n                vmId: currentVM.id,\n                taskName: `Task ${5 - currentVM.remainingTasks}`,\n                startTime,\n                endTime,\n                color: currentVM.id % 2 === 0 ? 'blue' : 'orange' // Alternate colors for tasks\n              };\n              setTasks(prevTasks => [...prevTasks, ganttTask]);\n            }\n\n            queueIndex = (queueIndex + 1) % updatedSimulation.length;\n\n            return updatedSimulation;\n          });\n\n          // Check if all tasks are completed\n          const allCompleted = simulation.every(vm => vm.remainingTasks === 0);\n          if (allCompleted) {\n            clearInterval(interval);\n          }\n        }, 1000); // Execute every second\n      };\n\n      simulateExecution();\n    } catch (error) {\n      console.error('Error scheduling VMs:', error);\n    }\n  };\n\n  // Add a new VM dynamically\n  const addVm = () => {\n    if (summary.total_cpu_usage >= 100) {\n      alert('Cannot add more VMs: CPU usage limit reached');\n      return;\n    }\n\n    const newVm = {\n      id: vms.length + 1,\n      name: `VM${vms.length + 1}`,\n      cpu_usage: Math.min(Math.floor(Math.random() * 50), 100 - summary.total_cpu_usage),\n      memory_usage: Math.floor(Math.random() * 5000),\n      status: 'Scheduled',\n      remainingTasks: 5\n    };\n    setVms([...vms, newVm]);\n    setSimulation([...simulation, newVm]);\n    setSummary(prevSummary => ({\n      ...prevSummary,\n      total_cpu_usage: (prevSummary.total_cpu_usage || 0) + newVm.cpu_usage,\n      total_memory_usage: (prevSummary.total_memory_usage || 0) + newVm.memory_usage,\n      vm_count: (prevSummary.vm_count || 0) + 1\n    }));\n  };\n\n  useEffect(() => {\n    fetchVms();\n    fetchSummary();\n    fetchPredictions();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h1>Virtual Machine Resource Allocator</h1>\n      <div className=\"summary\">\n        <h2>Summary</h2>\n        <p>Total CPU Usage: {summary.total_cpu_usage}</p>\n        <p>Total Memory Usage: {summary.total_memory_usage}</p>\n        <p>VM Count: {summary.vm_count}</p>\n      </div>\n\n      <div className=\"vms\">\n        <h2>Virtual Machines</h2>\n        <table>\n          <thead>\n            <tr>\n              <th>ID</th>\n              <th>Name</th>\n              <th>CPU Usage</th>\n              <th>Memory Usage</th>\n              <th>Status</th>\n              <th>Remaining Tasks</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {simulation.map(vm => (\n              <tr key={vm.id}>\n                <td>{vm.id}</td>\n                <td>{vm.name}</td>\n                <td>{vm.cpu_usage}</td>\n                <td>{vm.memory_usage}</td>\n                <td>{vm.status}</td>\n                <td>{vm.remainingTasks}</td>\n                <td>\n                  <button\n                    onClick={() => allocateResources(vm.id, vm.cpu_usage + 10, vm.memory_usage + 512)}\n                    disabled={vm.status === 'Completed'}\n                  >\n                    Allocate Resources\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n        <button onClick={addVm} disabled={summary.total_cpu_usage >= 100}>\n          Add VM\n        </button>\n      </div>\n\n      <div className=\"gantt\">\n        <h2>Task Gantt Chart</h2>\n        <GanttChart tasks={tasks} />\n      </div>\n\n      <div className=\"actions\">\n        <button onClick={scheduleVms}>Apply Round-Robin Scheduling</button>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}