{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Korisnik\\\\Desktop\\\\vmra project\\\\vmra_frontend\\\\vmra-frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// Importing necessary libraries\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport GanttChart from './GanttChart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [vms, setVms] = useState([]);\n  const [summary, setSummary] = useState({});\n  const [predictions, setPredictions] = useState([]);\n  const [simulation, setSimulation] = useState([]);\n  const [tasks, setTasks] = useState([]); // For storing tasks for Gantt chart\n\n  // Fetch VMs data\n  const fetchVms = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/vms');\n      setVms(response.data);\n    } catch (error) {\n      console.error('Error fetching VMs:', error);\n    }\n  };\n\n  // Fetch summary data\n  const fetchSummary = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/summary');\n      setSummary(response.data);\n    } catch (error) {\n      console.error('Error fetching summary:', error);\n    }\n  };\n\n  // Fetch predictions\n  const fetchPredictions = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/predict');\n      setPredictions(response.data);\n    } catch (error) {\n      console.error('Error fetching predictions:', error);\n    }\n  };\n\n  // Allocate resources to a VM\n  const allocateResources = async (vmId, cpu, memory) => {\n    try {\n      await axios.post('http://localhost:5000/allocate', {\n        vm_id: vmId,\n        cpu: cpu,\n        memory: memory\n      });\n      fetchVms();\n    } catch (error) {\n      console.error('Error allocating resources:', error);\n    }\n  };\n\n  // Apply round-robin scheduling and simulate execution\n  const scheduleVms = async () => {\n    try {\n      const response = await axios.post('http://localhost:5000/schedule');\n      fetchVms();\n\n      // Initialize simulation state\n      const taskQueue = response.data.vms.map(vm => ({\n        ...vm,\n        remainingTasks: 5\n      }));\n      setSimulation(taskQueue);\n\n      // Initialize Gantt chart tasks\n      const ganttTasks = response.data.vms.map(vm => ({\n        id: vm.id,\n        name: vm.name,\n        tasks: []\n      }));\n      const simulateExecution = () => {\n        let queueIndex = 0;\n        const interval = setInterval(() => {\n          setSimulation(prevSimulation => {\n            const updatedSimulation = [...prevSimulation];\n\n            // Process one VM at a time in round-robin order\n            const currentVM = updatedSimulation[queueIndex];\n            if (currentVM.remainingTasks > 0) {\n              const startTime = new Date();\n              currentVM.remainingTasks -= 1;\n              currentVM.cpu_usage = Math.max(currentVM.cpu_usage - 2, 0);\n              currentVM.memory_usage = Math.max(currentVM.memory_usage - 128, 0);\n              currentVM.status = currentVM.remainingTasks === 0 ? 'Completed' : 'Running';\n\n              // Set CPU and memory to 0 when tasks are completed\n              if (currentVM.remainingTasks === 0) {\n                currentVM.cpu_usage = 0;\n                currentVM.memory_usage = 0;\n              }\n\n              // Add task to Gantt chart\n              const endTime = new Date(startTime.getTime() + 1000); // 1 second per task\n              const ganttTask = {\n                vmId: currentVM.id,\n                taskName: `Task ${5 - currentVM.remainingTasks}`,\n                startTime,\n                endTime\n              };\n              setTasks(prevTasks => [...prevTasks, ganttTask]);\n            }\n            queueIndex = (queueIndex + 1) % updatedSimulation.length;\n            return updatedSimulation;\n          });\n\n          // Check if all tasks are completed\n          const allCompleted = simulation.every(vm => vm.remainingTasks === 0);\n          if (allCompleted) {\n            clearInterval(interval);\n          }\n        }, 1000); // Execute every second\n      };\n      simulateExecution();\n    } catch (error) {\n      console.error('Error scheduling VMs:', error);\n    }\n  };\n  useEffect(() => {\n    fetchVms();\n    fetchSummary();\n    fetchPredictions();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" Virtual Machine Resource Allocator \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"summary\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \" Summary \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" Total CPU Usage: \", summary.total_cpu_usage, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 29\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" Total Memory Usage: \", summary.total_memory_usage, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 64\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" VM Count: \", summary.vm_count, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 70\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 56\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"vms\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \" Virtual Machines \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \" ID \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 9\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \" Name \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 24\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \" CPU Usage \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 26\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \" Memory Usage \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 31\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \" Status \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 34\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \" Remaining Tasks \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 28\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \" Actions \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 37\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 9\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 9\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: [\" \", simulation.map(vm => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: [\" \", vm.id, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 17\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [\" \", vm.name, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 39\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [\" \", vm.cpu_usage, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 41\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [\" \", vm.memory_usage, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 46\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [\" \", vm.status, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 49\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [\" \", vm.remainingTasks, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 43\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => allocateResources(vm.id, vm.cpu_usage + 10, vm.memory_usage + 512),\n                disabled: vm.status === 'Completed',\n                children: \"Allocate Resources \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 175,\n                columnNumber: 17\n              }, this), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 51\n            }, this), \" \"]\n          }, vm.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 36\n          }, this)), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 17\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 38\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gantt\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \" Task Gantt Chart \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(GanttChart, {\n        tasks: tasks\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 38\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"actions\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: scheduleVms,\n        children: \" Apply Round - Robin Scheduling \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 9\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 14\n  }, this);\n};\n_s(App, \"VKQwRyOFwj1+3dCDhHMWh0pyS1U=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","GanttChart","jsxDEV","_jsxDEV","App","_s","vms","setVms","summary","setSummary","predictions","setPredictions","simulation","setSimulation","tasks","setTasks","fetchVms","response","get","data","error","console","fetchSummary","fetchPredictions","allocateResources","vmId","cpu","memory","post","vm_id","scheduleVms","taskQueue","map","vm","remainingTasks","ganttTasks","id","name","simulateExecution","queueIndex","interval","setInterval","prevSimulation","updatedSimulation","currentVM","startTime","Date","cpu_usage","Math","max","memory_usage","status","endTime","getTime","ganttTask","taskName","prevTasks","length","allCompleted","every","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","total_cpu_usage","total_memory_usage","vm_count","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Korisnik/Desktop/vmra project/vmra_frontend/vmra-frontend/src/App.js"],"sourcesContent":["// Importing necessary libraries\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport GanttChart from './GanttChart';\n\nconst App = () => {\n    const [vms, setVms] = useState([]);\n    const [summary, setSummary] = useState({});\n    const [predictions, setPredictions] = useState([]);\n    const [simulation, setSimulation] = useState([]);\n    const [tasks, setTasks] = useState([]); // For storing tasks for Gantt chart\n\n    // Fetch VMs data\n    const fetchVms = async() => {\n        try {\n            const response = await axios.get('http://localhost:5000/vms');\n            setVms(response.data);\n        } catch (error) {\n            console.error('Error fetching VMs:', error);\n        }\n    };\n\n    // Fetch summary data\n    const fetchSummary = async() => {\n        try {\n            const response = await axios.get('http://localhost:5000/summary');\n            setSummary(response.data);\n        } catch (error) {\n            console.error('Error fetching summary:', error);\n        }\n    };\n\n    // Fetch predictions\n    const fetchPredictions = async() => {\n        try {\n            const response = await axios.get('http://localhost:5000/predict');\n            setPredictions(response.data);\n        } catch (error) {\n            console.error('Error fetching predictions:', error);\n        }\n    };\n\n    // Allocate resources to a VM\n    const allocateResources = async(vmId, cpu, memory) => {\n        try {\n            await axios.post('http://localhost:5000/allocate', {\n                vm_id: vmId,\n                cpu: cpu,\n                memory: memory,\n            });\n            fetchVms();\n        } catch (error) {\n            console.error('Error allocating resources:', error);\n        }\n    };\n\n    // Apply round-robin scheduling and simulate execution\n    const scheduleVms = async() => {\n        try {\n            const response = await axios.post('http://localhost:5000/schedule');\n            fetchVms();\n\n            // Initialize simulation state\n            const taskQueue = response.data.vms.map(vm => ({...vm, remainingTasks: 5 }));\n            setSimulation(taskQueue);\n\n            // Initialize Gantt chart tasks\n            const ganttTasks = response.data.vms.map(vm => ({\n                id: vm.id,\n                name: vm.name,\n                tasks: [],\n            }));\n\n            const simulateExecution = () => {\n                let queueIndex = 0;\n\n                const interval = setInterval(() => {\n                    setSimulation(prevSimulation => {\n                        const updatedSimulation = [...prevSimulation];\n\n                        // Process one VM at a time in round-robin order\n                        const currentVM = updatedSimulation[queueIndex];\n                        if (currentVM.remainingTasks > 0) {\n                            const startTime = new Date();\n                            currentVM.remainingTasks -= 1;\n                            currentVM.cpu_usage = Math.max(currentVM.cpu_usage - 2, 0);\n                            currentVM.memory_usage = Math.max(currentVM.memory_usage - 128, 0);\n                            currentVM.status = currentVM.remainingTasks === 0 ? 'Completed' : 'Running';\n\n                            // Set CPU and memory to 0 when tasks are completed\n                            if (currentVM.remainingTasks === 0) {\n                                currentVM.cpu_usage = 0;\n                                currentVM.memory_usage = 0;\n                            }\n\n                            // Add task to Gantt chart\n                            const endTime = new Date(startTime.getTime() + 1000); // 1 second per task\n                            const ganttTask = {\n                                vmId: currentVM.id,\n                                taskName: `Task ${5 - currentVM.remainingTasks}`,\n                                startTime,\n                                endTime,\n                            };\n                            setTasks(prevTasks => [...prevTasks, ganttTask]);\n                        }\n\n                        queueIndex = (queueIndex + 1) % updatedSimulation.length;\n\n                        return updatedSimulation;\n                    });\n\n                    // Check if all tasks are completed\n                    const allCompleted = simulation.every(vm => vm.remainingTasks === 0);\n                    if (allCompleted) {\n                        clearInterval(interval);\n                    }\n                }, 1000); // Execute every second\n            };\n\n            simulateExecution();\n        } catch (error) {\n            console.error('Error scheduling VMs:', error);\n        }\n    };\n\n    useEffect(() => {\n        fetchVms();\n        fetchSummary();\n        fetchPredictions();\n    }, []);\n\n    return ( <\n        div className = \"App\" >\n        <\n        h1 > Virtual Machine Resource Allocator < /h1> <\n        div className = \"summary\" >\n        <\n        h2 > Summary < /h2> <\n        p > Total CPU Usage: { summary.total_cpu_usage } < /p> <\n        p > Total Memory Usage: { summary.total_memory_usage } < /p> <\n        p > VM Count: { summary.vm_count } < /p> <\n        /div>\n\n        <\n        div className = \"vms\" >\n        <\n        h2 > Virtual Machines < /h2> <\n        table >\n        <\n        thead >\n        <\n        tr >\n        <\n        th > ID < /th> <\n        th > Name < /th> <\n        th > CPU Usage < /th> <\n        th > Memory Usage < /th> <\n        th > Status < /th> <\n        th > Remaining Tasks < /th> <\n        th > Actions < /th> <\n        /tr> <\n        /thead> <\n        tbody > {\n            simulation.map(vm => ( <\n                tr key = { vm.id } >\n                <\n                td > { vm.id } < /td> <\n                td > { vm.name } < /td> <\n                td > { vm.cpu_usage } < /td> <\n                td > { vm.memory_usage } < /td> <\n                td > { vm.status } < /td> <\n                td > { vm.remainingTasks } < /td> <\n                td >\n                <\n                button onClick = {\n                    () => allocateResources(vm.id, vm.cpu_usage + 10, vm.memory_usage + 512) }\n                disabled = { vm.status === 'Completed' } >\n                Allocate Resources <\n                /button> <\n                /td> <\n                /tr>\n            ))\n        } <\n        /tbody> <\n        /table> <\n        /div>\n\n        <\n        div className = \"gantt\" >\n        <\n        h2 > Task Gantt Chart < /h2> <\n        GanttChart tasks = { tasks }\n        /> <\n        /div>\n\n        <\n        div className = \"actions\" >\n\n        <\n        button onClick = { scheduleVms } > Apply Round - Robin Scheduling < /button> <\n        /div> <\n        /div>\n    );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}